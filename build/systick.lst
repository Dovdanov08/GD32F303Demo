ARM GAS  C:\Temp\cclpNmec.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"systick.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Core/Src/systick.c"
  20              		.section	.text.systick_config,"ax",%progbits
  21              		.align	1
  22              		.global	systick_config
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	systick_config:
  28              	.LFB116:
   1:./Core/Src/systick.c **** /*!
   2:./Core/Src/systick.c ****     \file    systick.c
   3:./Core/Src/systick.c ****     \brief   the systick configuration file
   4:./Core/Src/systick.c **** 
   5:./Core/Src/systick.c ****     \version 2017-02-10, V1.0.0, firmware for GD32F30x
   6:./Core/Src/systick.c ****     \version 2018-10-10, V1.1.0, firmware for GD32F30x
   7:./Core/Src/systick.c ****     \version 2018-12-25, V2.0.0, firmware for GD32F30x
   8:./Core/Src/systick.c ****     \version 2020-09-30, V2.1.0, firmware for GD32F30x 
   9:./Core/Src/systick.c **** */
  10:./Core/Src/systick.c **** 
  11:./Core/Src/systick.c **** /*
  12:./Core/Src/systick.c ****     Copyright (c) 2020, GigaDevice Semiconductor Inc.
  13:./Core/Src/systick.c **** 
  14:./Core/Src/systick.c ****     Redistribution and use in source and binary forms, with or without modification, 
  15:./Core/Src/systick.c **** are permitted provided that the following conditions are met:
  16:./Core/Src/systick.c **** 
  17:./Core/Src/systick.c ****     1. Redistributions of source code must retain the above copyright notice, this 
  18:./Core/Src/systick.c ****        list of conditions and the following disclaimer.
  19:./Core/Src/systick.c ****     2. Redistributions in binary form must reproduce the above copyright notice, 
  20:./Core/Src/systick.c ****        this list of conditions and the following disclaimer in the documentation 
  21:./Core/Src/systick.c ****        and/or other materials provided with the distribution.
  22:./Core/Src/systick.c ****     3. Neither the name of the copyright holder nor the names of its contributors 
  23:./Core/Src/systick.c ****        may be used to endorse or promote products derived from this software without 
  24:./Core/Src/systick.c ****        specific prior written permission.
  25:./Core/Src/systick.c **** 
  26:./Core/Src/systick.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  27:./Core/Src/systick.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  28:./Core/Src/systick.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  29:./Core/Src/systick.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  30:./Core/Src/systick.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
ARM GAS  C:\Temp\cclpNmec.s 			page 2


  31:./Core/Src/systick.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  32:./Core/Src/systick.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  33:./Core/Src/systick.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  34:./Core/Src/systick.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  35:./Core/Src/systick.c **** OF SUCH DAMAGE.
  36:./Core/Src/systick.c **** */
  37:./Core/Src/systick.c **** 
  38:./Core/Src/systick.c **** #include "gd32f30x.h"
  39:./Core/Src/systick.c **** #include "systick.h"
  40:./Core/Src/systick.c **** #define SYSCLOCKDIVIDER 1000
  41:./Core/Src/systick.c **** 
  42:./Core/Src/systick.c **** volatile static uint32_t delay;
  43:./Core/Src/systick.c **** 
  44:./Core/Src/systick.c **** 
  45:./Core/Src/systick.c **** /*!
  46:./Core/Src/systick.c ****     \brief      configure systick
  47:./Core/Src/systick.c ****     \param[in]  none
  48:./Core/Src/systick.c ****     \param[out] none
  49:./Core/Src/systick.c ****     \retval     none
  50:./Core/Src/systick.c **** */
  51:./Core/Src/systick.c **** void systick_config(void)
  52:./Core/Src/systick.c **** {
  29              		.loc 1 52 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  53:./Core/Src/systick.c ****     /* setup systick timer for 1000Hz interrupts */
  54:./Core/Src/systick.c ****     if (SysTick_Config(SystemCoreClock / SYSCLOCKDIVIDER)){
  34              		.loc 1 54 5 view .LVU1
  35              		.loc 1 54 9 is_stmt 0 view .LVU2
  36 0000 0C4B     		ldr	r3, .L4
  37 0002 1B68     		ldr	r3, [r3]
  38 0004 0C4A     		ldr	r2, .L4+4
  39 0006 A2FB0323 		umull	r2, r3, r2, r3
  40 000a 9B09     		lsrs	r3, r3, #6
  41              	.LVL0:
  42              	.LBB10:
  43              	.LBI10:
  44              		.file 2 "CMSIS/core_cm4.h"
   1:CMSIS/core_cm4.h **** /**************************************************************************//**
   2:CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:CMSIS/core_cm4.h ****  * @version  V3.30
   5:CMSIS/core_cm4.h ****  * @date     17. February 2014
   6:CMSIS/core_cm4.h ****  *
   7:CMSIS/core_cm4.h ****  * @note
   8:CMSIS/core_cm4.h ****  *
   9:CMSIS/core_cm4.h ****  ******************************************************************************/
  10:CMSIS/core_cm4.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:CMSIS/core_cm4.h **** 
  12:CMSIS/core_cm4.h ****    All rights reserved.
  13:CMSIS/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:CMSIS/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:CMSIS/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:CMSIS/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:CMSIS/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
ARM GAS  C:\Temp\cclpNmec.s 			page 3


  18:CMSIS/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:CMSIS/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:CMSIS/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:CMSIS/core_cm4.h ****      to endorse or promote products derived from this software without
  22:CMSIS/core_cm4.h ****      specific prior written permission.
  23:CMSIS/core_cm4.h ****    *
  24:CMSIS/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:CMSIS/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:CMSIS/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:CMSIS/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:CMSIS/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:CMSIS/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:CMSIS/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:CMSIS/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:CMSIS/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:CMSIS/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:CMSIS/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:CMSIS/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:CMSIS/core_cm4.h **** 
  37:CMSIS/core_cm4.h **** 
  38:CMSIS/core_cm4.h **** #if defined ( __ICCARM__ )
  39:CMSIS/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:CMSIS/core_cm4.h **** #endif
  41:CMSIS/core_cm4.h **** 
  42:CMSIS/core_cm4.h **** #ifdef __cplusplus
  43:CMSIS/core_cm4.h ****  extern "C" {
  44:CMSIS/core_cm4.h **** #endif
  45:CMSIS/core_cm4.h **** 
  46:CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  47:CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  48:CMSIS/core_cm4.h **** 
  49:CMSIS/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:CMSIS/core_cm4.h **** 
  52:CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:CMSIS/core_cm4.h **** 
  55:CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:CMSIS/core_cm4.h **** 
  58:CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:CMSIS/core_cm4.h ****  */
  61:CMSIS/core_cm4.h **** 
  62:CMSIS/core_cm4.h **** 
  63:CMSIS/core_cm4.h **** /*******************************************************************************
  64:CMSIS/core_cm4.h ****  *                 CMSIS definitions
  65:CMSIS/core_cm4.h ****  ******************************************************************************/
  66:CMSIS/core_cm4.h **** /** \ingroup Cortex_M4
  67:CMSIS/core_cm4.h ****   @{
  68:CMSIS/core_cm4.h ****  */
  69:CMSIS/core_cm4.h **** 
  70:CMSIS/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
ARM GAS  C:\Temp\cclpNmec.s 			page 4


  75:CMSIS/core_cm4.h **** 
  76:CMSIS/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:CMSIS/core_cm4.h **** 
  78:CMSIS/core_cm4.h **** 
  79:CMSIS/core_cm4.h **** #if   defined ( __CC_ARM )
  80:CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:CMSIS/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:CMSIS/core_cm4.h **** 
  84:CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
  85:CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:CMSIS/core_cm4.h **** 
  89:CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
  90:CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
  93:CMSIS/core_cm4.h **** 
  94:CMSIS/core_cm4.h **** #elif defined ( __TMS470__ )
  95:CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:CMSIS/core_cm4.h **** 
  98:CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
  99:CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:CMSIS/core_cm4.h **** 
 103:CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 104:CMSIS/core_cm4.h ****   #define __packed
 105:CMSIS/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:CMSIS/core_cm4.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 108:CMSIS/core_cm4.h **** 
 109:CMSIS/core_cm4.h **** #endif
 110:CMSIS/core_cm4.h **** 
 111:CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not. For this, __FPU_PRESENT has to be checked p
 112:CMSIS/core_cm4.h **** */
 113:CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
 114:CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 115:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 116:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 117:CMSIS/core_cm4.h ****     #else
 118:CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 119:CMSIS/core_cm4.h ****       #define __FPU_USED       0
 120:CMSIS/core_cm4.h ****     #endif
 121:CMSIS/core_cm4.h ****   #else
 122:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 123:CMSIS/core_cm4.h ****   #endif
 124:CMSIS/core_cm4.h **** 
 125:CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 126:CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 127:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 128:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 129:CMSIS/core_cm4.h ****     #else
 130:CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 131:CMSIS/core_cm4.h ****       #define __FPU_USED       0
ARM GAS  C:\Temp\cclpNmec.s 			page 5


 132:CMSIS/core_cm4.h ****     #endif
 133:CMSIS/core_cm4.h ****   #else
 134:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 135:CMSIS/core_cm4.h ****   #endif
 136:CMSIS/core_cm4.h **** 
 137:CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 138:CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 139:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 140:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 141:CMSIS/core_cm4.h ****     #else
 142:CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 143:CMSIS/core_cm4.h ****       #define __FPU_USED       0
 144:CMSIS/core_cm4.h ****     #endif
 145:CMSIS/core_cm4.h ****   #else
 146:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 147:CMSIS/core_cm4.h ****   #endif
 148:CMSIS/core_cm4.h **** 
 149:CMSIS/core_cm4.h **** #elif defined ( __TMS470__ )
 150:CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 151:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 152:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 153:CMSIS/core_cm4.h ****     #else
 154:CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 155:CMSIS/core_cm4.h ****       #define __FPU_USED       0
 156:CMSIS/core_cm4.h ****     #endif
 157:CMSIS/core_cm4.h ****   #else
 158:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 159:CMSIS/core_cm4.h ****   #endif
 160:CMSIS/core_cm4.h **** 
 161:CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 162:CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 163:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 164:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 165:CMSIS/core_cm4.h ****     #else
 166:CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 167:CMSIS/core_cm4.h ****       #define __FPU_USED       0
 168:CMSIS/core_cm4.h ****     #endif
 169:CMSIS/core_cm4.h ****   #else
 170:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 171:CMSIS/core_cm4.h ****   #endif
 172:CMSIS/core_cm4.h **** 
 173:CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 174:CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 175:CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 176:CMSIS/core_cm4.h ****       #define __FPU_USED       1
 177:CMSIS/core_cm4.h ****     #else
 178:CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 179:CMSIS/core_cm4.h ****       #define __FPU_USED       0
 180:CMSIS/core_cm4.h ****     #endif
 181:CMSIS/core_cm4.h ****   #else
 182:CMSIS/core_cm4.h ****     #define __FPU_USED         0
 183:CMSIS/core_cm4.h ****   #endif
 184:CMSIS/core_cm4.h **** #endif
 185:CMSIS/core_cm4.h **** 
 186:CMSIS/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 187:CMSIS/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 188:CMSIS/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
ARM GAS  C:\Temp\cclpNmec.s 			page 6


 189:CMSIS/core_cm4.h **** #include <core_cm4_simd.h>               /* Compiler specific SIMD Intrinsics               */
 190:CMSIS/core_cm4.h **** 
 191:CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 192:CMSIS/core_cm4.h **** 
 193:CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 194:CMSIS/core_cm4.h **** 
 195:CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 196:CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 197:CMSIS/core_cm4.h **** 
 198:CMSIS/core_cm4.h **** /* check device defines and use defaults */
 199:CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 200:CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 201:CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000
 202:CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 203:CMSIS/core_cm4.h ****   #endif
 204:CMSIS/core_cm4.h **** 
 205:CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 206:CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0
 207:CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 208:CMSIS/core_cm4.h ****   #endif
 209:CMSIS/core_cm4.h **** 
 210:CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 211:CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0
 212:CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 213:CMSIS/core_cm4.h ****   #endif
 214:CMSIS/core_cm4.h **** 
 215:CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 216:CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 217:CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 218:CMSIS/core_cm4.h ****   #endif
 219:CMSIS/core_cm4.h **** 
 220:CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 221:CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 222:CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 223:CMSIS/core_cm4.h ****   #endif
 224:CMSIS/core_cm4.h **** #endif
 225:CMSIS/core_cm4.h **** 
 226:CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 227:CMSIS/core_cm4.h **** /**
 228:CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 229:CMSIS/core_cm4.h **** 
 230:CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 231:CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 232:CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 233:CMSIS/core_cm4.h **** */
 234:CMSIS/core_cm4.h **** #ifdef __cplusplus
 235:CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 236:CMSIS/core_cm4.h **** #else
 237:CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 238:CMSIS/core_cm4.h **** #endif
 239:CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 240:CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 241:CMSIS/core_cm4.h **** 
 242:CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 243:CMSIS/core_cm4.h **** 
 244:CMSIS/core_cm4.h **** 
 245:CMSIS/core_cm4.h **** 
ARM GAS  C:\Temp\cclpNmec.s 			page 7


 246:CMSIS/core_cm4.h **** /*******************************************************************************
 247:CMSIS/core_cm4.h ****  *                 Register Abstraction
 248:CMSIS/core_cm4.h ****   Core Register contain:
 249:CMSIS/core_cm4.h ****   - Core Register
 250:CMSIS/core_cm4.h ****   - Core NVIC Register
 251:CMSIS/core_cm4.h ****   - Core SCB Register
 252:CMSIS/core_cm4.h ****   - Core SysTick Register
 253:CMSIS/core_cm4.h ****   - Core Debug Register
 254:CMSIS/core_cm4.h ****   - Core MPU Register
 255:CMSIS/core_cm4.h ****   - Core FPU Register
 256:CMSIS/core_cm4.h ****  ******************************************************************************/
 257:CMSIS/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 258:CMSIS/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 259:CMSIS/core_cm4.h **** */
 260:CMSIS/core_cm4.h **** 
 261:CMSIS/core_cm4.h **** /** \ingroup    CMSIS_core_register
 262:CMSIS/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 263:CMSIS/core_cm4.h ****     \brief  Core Register type definitions.
 264:CMSIS/core_cm4.h ****   @{
 265:CMSIS/core_cm4.h ****  */
 266:CMSIS/core_cm4.h **** 
 267:CMSIS/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 268:CMSIS/core_cm4.h ****  */
 269:CMSIS/core_cm4.h **** typedef union
 270:CMSIS/core_cm4.h **** {
 271:CMSIS/core_cm4.h ****   struct
 272:CMSIS/core_cm4.h ****   {
 273:CMSIS/core_cm4.h **** #if (__CORTEX_M != 0x04)
 274:CMSIS/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 275:CMSIS/core_cm4.h **** #else
 276:CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 277:CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 278:CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 279:CMSIS/core_cm4.h **** #endif
 280:CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 281:CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 282:CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 283:CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 284:CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 285:CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 286:CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 287:CMSIS/core_cm4.h **** } APSR_Type;
 288:CMSIS/core_cm4.h **** 
 289:CMSIS/core_cm4.h **** 
 290:CMSIS/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 291:CMSIS/core_cm4.h ****  */
 292:CMSIS/core_cm4.h **** typedef union
 293:CMSIS/core_cm4.h **** {
 294:CMSIS/core_cm4.h ****   struct
 295:CMSIS/core_cm4.h ****   {
 296:CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 297:CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 298:CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 299:CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 300:CMSIS/core_cm4.h **** } IPSR_Type;
 301:CMSIS/core_cm4.h **** 
 302:CMSIS/core_cm4.h **** 
ARM GAS  C:\Temp\cclpNmec.s 			page 8


 303:CMSIS/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 304:CMSIS/core_cm4.h ****  */
 305:CMSIS/core_cm4.h **** typedef union
 306:CMSIS/core_cm4.h **** {
 307:CMSIS/core_cm4.h ****   struct
 308:CMSIS/core_cm4.h ****   {
 309:CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 310:CMSIS/core_cm4.h **** #if (__CORTEX_M != 0x04)
 311:CMSIS/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 312:CMSIS/core_cm4.h **** #else
 313:CMSIS/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 314:CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 315:CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 316:CMSIS/core_cm4.h **** #endif
 317:CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 318:CMSIS/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 319:CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 320:CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 321:CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 322:CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 323:CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 324:CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 325:CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 326:CMSIS/core_cm4.h **** } xPSR_Type;
 327:CMSIS/core_cm4.h **** 
 328:CMSIS/core_cm4.h **** 
 329:CMSIS/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 330:CMSIS/core_cm4.h ****  */
 331:CMSIS/core_cm4.h **** typedef union
 332:CMSIS/core_cm4.h **** {
 333:CMSIS/core_cm4.h ****   struct
 334:CMSIS/core_cm4.h ****   {
 335:CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 336:CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 337:CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 338:CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 339:CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 340:CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 341:CMSIS/core_cm4.h **** } CONTROL_Type;
 342:CMSIS/core_cm4.h **** 
 343:CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 344:CMSIS/core_cm4.h **** 
 345:CMSIS/core_cm4.h **** 
 346:CMSIS/core_cm4.h **** /** \ingroup    CMSIS_core_register
 347:CMSIS/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 348:CMSIS/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 349:CMSIS/core_cm4.h ****   @{
 350:CMSIS/core_cm4.h ****  */
 351:CMSIS/core_cm4.h **** 
 352:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 353:CMSIS/core_cm4.h ****  */
 354:CMSIS/core_cm4.h **** typedef struct
 355:CMSIS/core_cm4.h **** {
 356:CMSIS/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 357:CMSIS/core_cm4.h ****        uint32_t RESERVED0[24];
 358:CMSIS/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 359:CMSIS/core_cm4.h ****        uint32_t RSERVED1[24];
ARM GAS  C:\Temp\cclpNmec.s 			page 9


 360:CMSIS/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 361:CMSIS/core_cm4.h ****        uint32_t RESERVED2[24];
 362:CMSIS/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 363:CMSIS/core_cm4.h ****        uint32_t RESERVED3[24];
 364:CMSIS/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 365:CMSIS/core_cm4.h ****        uint32_t RESERVED4[56];
 366:CMSIS/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 367:CMSIS/core_cm4.h ****        uint32_t RESERVED5[644];
 368:CMSIS/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 369:CMSIS/core_cm4.h **** }  NVIC_Type;
 370:CMSIS/core_cm4.h **** 
 371:CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 372:CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 373:CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 374:CMSIS/core_cm4.h **** 
 375:CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 376:CMSIS/core_cm4.h **** 
 377:CMSIS/core_cm4.h **** 
 378:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
 379:CMSIS/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 380:CMSIS/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 381:CMSIS/core_cm4.h ****   @{
 382:CMSIS/core_cm4.h ****  */
 383:CMSIS/core_cm4.h **** 
 384:CMSIS/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 385:CMSIS/core_cm4.h ****  */
 386:CMSIS/core_cm4.h **** typedef struct
 387:CMSIS/core_cm4.h **** {
 388:CMSIS/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 389:CMSIS/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 390:CMSIS/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 391:CMSIS/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 392:CMSIS/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 393:CMSIS/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 394:CMSIS/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 395:CMSIS/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 396:CMSIS/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 397:CMSIS/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 398:CMSIS/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 399:CMSIS/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 400:CMSIS/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 401:CMSIS/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 402:CMSIS/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 403:CMSIS/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 404:CMSIS/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 405:CMSIS/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 406:CMSIS/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 407:CMSIS/core_cm4.h ****        uint32_t RESERVED0[5];
 408:CMSIS/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 409:CMSIS/core_cm4.h **** } SCB_Type;
 410:CMSIS/core_cm4.h **** 
 411:CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 412:CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 413:CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 414:CMSIS/core_cm4.h **** 
 415:CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 416:CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
ARM GAS  C:\Temp\cclpNmec.s 			page 10


 417:CMSIS/core_cm4.h **** 
 418:CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 419:CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 420:CMSIS/core_cm4.h **** 
 421:CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 422:CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 423:CMSIS/core_cm4.h **** 
 424:CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 425:CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 426:CMSIS/core_cm4.h **** 
 427:CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 428:CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 429:CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 430:CMSIS/core_cm4.h **** 
 431:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 432:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 433:CMSIS/core_cm4.h **** 
 434:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 435:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 436:CMSIS/core_cm4.h **** 
 437:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 438:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 439:CMSIS/core_cm4.h **** 
 440:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 441:CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 442:CMSIS/core_cm4.h **** 
 443:CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 444:CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 445:CMSIS/core_cm4.h **** 
 446:CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 447:CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 448:CMSIS/core_cm4.h **** 
 449:CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 450:CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 451:CMSIS/core_cm4.h **** 
 452:CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 453:CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 454:CMSIS/core_cm4.h **** 
 455:CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 456:CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 457:CMSIS/core_cm4.h **** 
 458:CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 459:CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 460:CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 461:CMSIS/core_cm4.h **** 
 462:CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 463:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 464:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 465:CMSIS/core_cm4.h **** 
 466:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 467:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 468:CMSIS/core_cm4.h **** 
 469:CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 470:CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 471:CMSIS/core_cm4.h **** 
 472:CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 473:CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
ARM GAS  C:\Temp\cclpNmec.s 			page 11


 474:CMSIS/core_cm4.h **** 
 475:CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 476:CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 477:CMSIS/core_cm4.h **** 
 478:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 479:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 480:CMSIS/core_cm4.h **** 
 481:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 482:CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 483:CMSIS/core_cm4.h **** 
 484:CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 485:CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 486:CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 487:CMSIS/core_cm4.h **** 
 488:CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 489:CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 490:CMSIS/core_cm4.h **** 
 491:CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 492:CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 493:CMSIS/core_cm4.h **** 
 494:CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 495:CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 496:CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 497:CMSIS/core_cm4.h **** 
 498:CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 499:CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 500:CMSIS/core_cm4.h **** 
 501:CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 502:CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 503:CMSIS/core_cm4.h **** 
 504:CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 505:CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 506:CMSIS/core_cm4.h **** 
 507:CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 508:CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 509:CMSIS/core_cm4.h **** 
 510:CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 511:CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 512:CMSIS/core_cm4.h **** 
 513:CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 514:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 515:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 516:CMSIS/core_cm4.h **** 
 517:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 518:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 519:CMSIS/core_cm4.h **** 
 520:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 521:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 522:CMSIS/core_cm4.h **** 
 523:CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 524:CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 525:CMSIS/core_cm4.h **** 
 526:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 527:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 528:CMSIS/core_cm4.h **** 
 529:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 530:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
ARM GAS  C:\Temp\cclpNmec.s 			page 12


 531:CMSIS/core_cm4.h **** 
 532:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 533:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 534:CMSIS/core_cm4.h **** 
 535:CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 536:CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 537:CMSIS/core_cm4.h **** 
 538:CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 539:CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 540:CMSIS/core_cm4.h **** 
 541:CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 542:CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 543:CMSIS/core_cm4.h **** 
 544:CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 545:CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 546:CMSIS/core_cm4.h **** 
 547:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 548:CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 549:CMSIS/core_cm4.h **** 
 550:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 551:CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 552:CMSIS/core_cm4.h **** 
 553:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 554:CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 555:CMSIS/core_cm4.h **** 
 556:CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 557:CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 558:CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 559:CMSIS/core_cm4.h **** 
 560:CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 561:CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 562:CMSIS/core_cm4.h **** 
 563:CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 564:CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 565:CMSIS/core_cm4.h **** 
 566:CMSIS/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 567:CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 568:CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 569:CMSIS/core_cm4.h **** 
 570:CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 571:CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 572:CMSIS/core_cm4.h **** 
 573:CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 574:CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 575:CMSIS/core_cm4.h **** 
 576:CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 577:CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 578:CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 579:CMSIS/core_cm4.h **** 
 580:CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 581:CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 582:CMSIS/core_cm4.h **** 
 583:CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 584:CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 585:CMSIS/core_cm4.h **** 
 586:CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 587:CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
ARM GAS  C:\Temp\cclpNmec.s 			page 13


 588:CMSIS/core_cm4.h **** 
 589:CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 590:CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 591:CMSIS/core_cm4.h **** 
 592:CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 593:CMSIS/core_cm4.h **** 
 594:CMSIS/core_cm4.h **** 
 595:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
 596:CMSIS/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 597:CMSIS/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 598:CMSIS/core_cm4.h ****   @{
 599:CMSIS/core_cm4.h ****  */
 600:CMSIS/core_cm4.h **** 
 601:CMSIS/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 602:CMSIS/core_cm4.h ****  */
 603:CMSIS/core_cm4.h **** typedef struct
 604:CMSIS/core_cm4.h **** {
 605:CMSIS/core_cm4.h ****        uint32_t RESERVED0[1];
 606:CMSIS/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 607:CMSIS/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 608:CMSIS/core_cm4.h **** } SCnSCB_Type;
 609:CMSIS/core_cm4.h **** 
 610:CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 611:CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 612:CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 613:CMSIS/core_cm4.h **** 
 614:CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 615:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 616:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 617:CMSIS/core_cm4.h **** 
 618:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 619:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 620:CMSIS/core_cm4.h **** 
 621:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 622:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 623:CMSIS/core_cm4.h **** 
 624:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 625:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 626:CMSIS/core_cm4.h **** 
 627:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 628:CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 629:CMSIS/core_cm4.h **** 
 630:CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 631:CMSIS/core_cm4.h **** 
 632:CMSIS/core_cm4.h **** 
 633:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
 634:CMSIS/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 635:CMSIS/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 636:CMSIS/core_cm4.h ****   @{
 637:CMSIS/core_cm4.h ****  */
 638:CMSIS/core_cm4.h **** 
 639:CMSIS/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 640:CMSIS/core_cm4.h ****  */
 641:CMSIS/core_cm4.h **** typedef struct
 642:CMSIS/core_cm4.h **** {
 643:CMSIS/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 644:CMSIS/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
ARM GAS  C:\Temp\cclpNmec.s 			page 14


 645:CMSIS/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 646:CMSIS/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 647:CMSIS/core_cm4.h **** } SysTick_Type;
 648:CMSIS/core_cm4.h **** 
 649:CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 650:CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 651:CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 652:CMSIS/core_cm4.h **** 
 653:CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 654:CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 655:CMSIS/core_cm4.h **** 
 656:CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 657:CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 658:CMSIS/core_cm4.h **** 
 659:CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 660:CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 661:CMSIS/core_cm4.h **** 
 662:CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 663:CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 664:CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 665:CMSIS/core_cm4.h **** 
 666:CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 667:CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 668:CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 669:CMSIS/core_cm4.h **** 
 670:CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 671:CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 672:CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 673:CMSIS/core_cm4.h **** 
 674:CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 675:CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 676:CMSIS/core_cm4.h **** 
 677:CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 678:CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 679:CMSIS/core_cm4.h **** 
 680:CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 681:CMSIS/core_cm4.h **** 
 682:CMSIS/core_cm4.h **** 
 683:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
 684:CMSIS/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 685:CMSIS/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 686:CMSIS/core_cm4.h ****   @{
 687:CMSIS/core_cm4.h ****  */
 688:CMSIS/core_cm4.h **** 
 689:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 690:CMSIS/core_cm4.h ****  */
 691:CMSIS/core_cm4.h **** typedef struct
 692:CMSIS/core_cm4.h **** {
 693:CMSIS/core_cm4.h ****   __O  union
 694:CMSIS/core_cm4.h ****   {
 695:CMSIS/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 696:CMSIS/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 697:CMSIS/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 698:CMSIS/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 699:CMSIS/core_cm4.h ****        uint32_t RESERVED0[864];
 700:CMSIS/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 701:CMSIS/core_cm4.h ****        uint32_t RESERVED1[15];
ARM GAS  C:\Temp\cclpNmec.s 			page 15


 702:CMSIS/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 703:CMSIS/core_cm4.h ****        uint32_t RESERVED2[15];
 704:CMSIS/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 705:CMSIS/core_cm4.h ****        uint32_t RESERVED3[29];
 706:CMSIS/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 707:CMSIS/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 708:CMSIS/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 709:CMSIS/core_cm4.h ****        uint32_t RESERVED4[43];
 710:CMSIS/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 711:CMSIS/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 712:CMSIS/core_cm4.h ****        uint32_t RESERVED5[6];
 713:CMSIS/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 714:CMSIS/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 715:CMSIS/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 716:CMSIS/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 717:CMSIS/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 718:CMSIS/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 719:CMSIS/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 720:CMSIS/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 721:CMSIS/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 722:CMSIS/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 723:CMSIS/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 724:CMSIS/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 725:CMSIS/core_cm4.h **** } ITM_Type;
 726:CMSIS/core_cm4.h **** 
 727:CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 728:CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 729:CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 730:CMSIS/core_cm4.h **** 
 731:CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 732:CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 733:CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 734:CMSIS/core_cm4.h **** 
 735:CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 736:CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 737:CMSIS/core_cm4.h **** 
 738:CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 739:CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 740:CMSIS/core_cm4.h **** 
 741:CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 742:CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 743:CMSIS/core_cm4.h **** 
 744:CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 745:CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 746:CMSIS/core_cm4.h **** 
 747:CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 748:CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 749:CMSIS/core_cm4.h **** 
 750:CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 751:CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 752:CMSIS/core_cm4.h **** 
 753:CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 754:CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 755:CMSIS/core_cm4.h **** 
 756:CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 757:CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 758:CMSIS/core_cm4.h **** 
ARM GAS  C:\Temp\cclpNmec.s 			page 16


 759:CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 760:CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 761:CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 762:CMSIS/core_cm4.h **** 
 763:CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 764:CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 765:CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 766:CMSIS/core_cm4.h **** 
 767:CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 768:CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 769:CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 770:CMSIS/core_cm4.h **** 
 771:CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 772:CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 773:CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 774:CMSIS/core_cm4.h **** 
 775:CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 776:CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 777:CMSIS/core_cm4.h **** 
 778:CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 779:CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 780:CMSIS/core_cm4.h **** 
 781:CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 782:CMSIS/core_cm4.h **** 
 783:CMSIS/core_cm4.h **** 
 784:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
 785:CMSIS/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 786:CMSIS/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 787:CMSIS/core_cm4.h ****   @{
 788:CMSIS/core_cm4.h ****  */
 789:CMSIS/core_cm4.h **** 
 790:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 791:CMSIS/core_cm4.h ****  */
 792:CMSIS/core_cm4.h **** typedef struct
 793:CMSIS/core_cm4.h **** {
 794:CMSIS/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 795:CMSIS/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 796:CMSIS/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 797:CMSIS/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 798:CMSIS/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 799:CMSIS/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 800:CMSIS/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 801:CMSIS/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 802:CMSIS/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 803:CMSIS/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 804:CMSIS/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 805:CMSIS/core_cm4.h ****        uint32_t RESERVED0[1];
 806:CMSIS/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 807:CMSIS/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 808:CMSIS/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 809:CMSIS/core_cm4.h ****        uint32_t RESERVED1[1];
 810:CMSIS/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 811:CMSIS/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 812:CMSIS/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 813:CMSIS/core_cm4.h ****        uint32_t RESERVED2[1];
 814:CMSIS/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 815:CMSIS/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
ARM GAS  C:\Temp\cclpNmec.s 			page 17


 816:CMSIS/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 817:CMSIS/core_cm4.h **** } DWT_Type;
 818:CMSIS/core_cm4.h **** 
 819:CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 820:CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 821:CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 822:CMSIS/core_cm4.h **** 
 823:CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 824:CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 825:CMSIS/core_cm4.h **** 
 826:CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 827:CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 828:CMSIS/core_cm4.h **** 
 829:CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 830:CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 831:CMSIS/core_cm4.h **** 
 832:CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 833:CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 834:CMSIS/core_cm4.h **** 
 835:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 836:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 837:CMSIS/core_cm4.h **** 
 838:CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 839:CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 840:CMSIS/core_cm4.h **** 
 841:CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 842:CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 843:CMSIS/core_cm4.h **** 
 844:CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 845:CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 846:CMSIS/core_cm4.h **** 
 847:CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 848:CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 849:CMSIS/core_cm4.h **** 
 850:CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 851:CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 852:CMSIS/core_cm4.h **** 
 853:CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 854:CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 855:CMSIS/core_cm4.h **** 
 856:CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 857:CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 858:CMSIS/core_cm4.h **** 
 859:CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 860:CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 861:CMSIS/core_cm4.h **** 
 862:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 863:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 864:CMSIS/core_cm4.h **** 
 865:CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 866:CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 867:CMSIS/core_cm4.h **** 
 868:CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 869:CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 870:CMSIS/core_cm4.h **** 
 871:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 872:CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
ARM GAS  C:\Temp\cclpNmec.s 			page 18


 873:CMSIS/core_cm4.h **** 
 874:CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 875:CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 876:CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 877:CMSIS/core_cm4.h **** 
 878:CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 879:CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 880:CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 881:CMSIS/core_cm4.h **** 
 882:CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 883:CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 884:CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 885:CMSIS/core_cm4.h **** 
 886:CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
 887:CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 888:CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 889:CMSIS/core_cm4.h **** 
 890:CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 891:CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 892:CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 893:CMSIS/core_cm4.h **** 
 894:CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 895:CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 896:CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 897:CMSIS/core_cm4.h **** 
 898:CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 899:CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 900:CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 901:CMSIS/core_cm4.h **** 
 902:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 903:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 904:CMSIS/core_cm4.h **** 
 905:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 906:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 907:CMSIS/core_cm4.h **** 
 908:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 909:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 910:CMSIS/core_cm4.h **** 
 911:CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 912:CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 913:CMSIS/core_cm4.h **** 
 914:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 915:CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 916:CMSIS/core_cm4.h **** 
 917:CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 918:CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 919:CMSIS/core_cm4.h **** 
 920:CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 921:CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 922:CMSIS/core_cm4.h **** 
 923:CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 924:CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 925:CMSIS/core_cm4.h **** 
 926:CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 927:CMSIS/core_cm4.h **** 
 928:CMSIS/core_cm4.h **** 
 929:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
ARM GAS  C:\Temp\cclpNmec.s 			page 19


 930:CMSIS/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 931:CMSIS/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 932:CMSIS/core_cm4.h ****   @{
 933:CMSIS/core_cm4.h ****  */
 934:CMSIS/core_cm4.h **** 
 935:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 936:CMSIS/core_cm4.h ****  */
 937:CMSIS/core_cm4.h **** typedef struct
 938:CMSIS/core_cm4.h **** {
 939:CMSIS/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 940:CMSIS/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 941:CMSIS/core_cm4.h ****        uint32_t RESERVED0[2];
 942:CMSIS/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 943:CMSIS/core_cm4.h ****        uint32_t RESERVED1[55];
 944:CMSIS/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 945:CMSIS/core_cm4.h ****        uint32_t RESERVED2[131];
 946:CMSIS/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 947:CMSIS/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 948:CMSIS/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 949:CMSIS/core_cm4.h ****        uint32_t RESERVED3[759];
 950:CMSIS/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 951:CMSIS/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 952:CMSIS/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 953:CMSIS/core_cm4.h ****        uint32_t RESERVED4[1];
 954:CMSIS/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 955:CMSIS/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 956:CMSIS/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 957:CMSIS/core_cm4.h ****        uint32_t RESERVED5[39];
 958:CMSIS/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 959:CMSIS/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 960:CMSIS/core_cm4.h ****        uint32_t RESERVED7[8];
 961:CMSIS/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 962:CMSIS/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 963:CMSIS/core_cm4.h **** } TPI_Type;
 964:CMSIS/core_cm4.h **** 
 965:CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 966:CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 967:CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 968:CMSIS/core_cm4.h **** 
 969:CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
 970:CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 971:CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 972:CMSIS/core_cm4.h **** 
 973:CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
 974:CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 975:CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 976:CMSIS/core_cm4.h **** 
 977:CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 978:CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 979:CMSIS/core_cm4.h **** 
 980:CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 981:CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 982:CMSIS/core_cm4.h **** 
 983:CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 984:CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 985:CMSIS/core_cm4.h **** 
 986:CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
ARM GAS  C:\Temp\cclpNmec.s 			page 20


 987:CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 988:CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 989:CMSIS/core_cm4.h **** 
 990:CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 991:CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 992:CMSIS/core_cm4.h **** 
 993:CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
 994:CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 995:CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 996:CMSIS/core_cm4.h **** 
 997:CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 998:CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 999:CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1000:CMSIS/core_cm4.h **** 
1001:CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1002:CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1003:CMSIS/core_cm4.h **** 
1004:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1005:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1006:CMSIS/core_cm4.h **** 
1007:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1008:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1009:CMSIS/core_cm4.h **** 
1010:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
1011:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1012:CMSIS/core_cm4.h **** 
1013:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
1014:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1015:CMSIS/core_cm4.h **** 
1016:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
1017:CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
1018:CMSIS/core_cm4.h **** 
1019:CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1020:CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1021:CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
1022:CMSIS/core_cm4.h **** 
1023:CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1024:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1025:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1026:CMSIS/core_cm4.h **** 
1027:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1028:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1029:CMSIS/core_cm4.h **** 
1030:CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1031:CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1032:CMSIS/core_cm4.h **** 
1033:CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1034:CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1035:CMSIS/core_cm4.h **** 
1036:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1037:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1038:CMSIS/core_cm4.h **** 
1039:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1040:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1041:CMSIS/core_cm4.h **** 
1042:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1043:CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
ARM GAS  C:\Temp\cclpNmec.s 			page 21


1044:CMSIS/core_cm4.h **** 
1045:CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1046:CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1047:CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
1048:CMSIS/core_cm4.h **** 
1049:CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1050:CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1051:CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1052:CMSIS/core_cm4.h **** 
1053:CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1054:CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1055:CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1056:CMSIS/core_cm4.h **** 
1057:CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1058:CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1059:CMSIS/core_cm4.h **** 
1060:CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1061:CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1062:CMSIS/core_cm4.h **** 
1063:CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1064:CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1065:CMSIS/core_cm4.h **** 
1066:CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1067:CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1068:CMSIS/core_cm4.h **** 
1069:CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1070:CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1071:CMSIS/core_cm4.h **** 
1072:CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1073:CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1074:CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1075:CMSIS/core_cm4.h **** 
1076:CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1077:CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1078:CMSIS/core_cm4.h **** 
1079:CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1080:CMSIS/core_cm4.h **** 
1081:CMSIS/core_cm4.h **** 
1082:CMSIS/core_cm4.h **** #if (__MPU_PRESENT == 1)
1083:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
1084:CMSIS/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1085:CMSIS/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1086:CMSIS/core_cm4.h ****   @{
1087:CMSIS/core_cm4.h ****  */
1088:CMSIS/core_cm4.h **** 
1089:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1090:CMSIS/core_cm4.h ****  */
1091:CMSIS/core_cm4.h **** typedef struct
1092:CMSIS/core_cm4.h **** {
1093:CMSIS/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1094:CMSIS/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1095:CMSIS/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1096:CMSIS/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1097:CMSIS/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1098:CMSIS/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1099:CMSIS/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1100:CMSIS/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
ARM GAS  C:\Temp\cclpNmec.s 			page 22


1101:CMSIS/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1102:CMSIS/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1103:CMSIS/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1104:CMSIS/core_cm4.h **** } MPU_Type;
1105:CMSIS/core_cm4.h **** 
1106:CMSIS/core_cm4.h **** /* MPU Type Register */
1107:CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1108:CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1109:CMSIS/core_cm4.h **** 
1110:CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1111:CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1112:CMSIS/core_cm4.h **** 
1113:CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1114:CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1115:CMSIS/core_cm4.h **** 
1116:CMSIS/core_cm4.h **** /* MPU Control Register */
1117:CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1118:CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1119:CMSIS/core_cm4.h **** 
1120:CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1121:CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1122:CMSIS/core_cm4.h **** 
1123:CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1124:CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1125:CMSIS/core_cm4.h **** 
1126:CMSIS/core_cm4.h **** /* MPU Region Number Register */
1127:CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1128:CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1129:CMSIS/core_cm4.h **** 
1130:CMSIS/core_cm4.h **** /* MPU Region Base Address Register */
1131:CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1132:CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1133:CMSIS/core_cm4.h **** 
1134:CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1135:CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1136:CMSIS/core_cm4.h **** 
1137:CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1138:CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1139:CMSIS/core_cm4.h **** 
1140:CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register */
1141:CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1142:CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1143:CMSIS/core_cm4.h **** 
1144:CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1145:CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1146:CMSIS/core_cm4.h **** 
1147:CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1148:CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1149:CMSIS/core_cm4.h **** 
1150:CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1151:CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1152:CMSIS/core_cm4.h **** 
1153:CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1154:CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1155:CMSIS/core_cm4.h **** 
1156:CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1157:CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
ARM GAS  C:\Temp\cclpNmec.s 			page 23


1158:CMSIS/core_cm4.h **** 
1159:CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1160:CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1161:CMSIS/core_cm4.h **** 
1162:CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1163:CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1164:CMSIS/core_cm4.h **** 
1165:CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1166:CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1167:CMSIS/core_cm4.h **** 
1168:CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1169:CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1170:CMSIS/core_cm4.h **** 
1171:CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1172:CMSIS/core_cm4.h **** #endif
1173:CMSIS/core_cm4.h **** 
1174:CMSIS/core_cm4.h **** 
1175:CMSIS/core_cm4.h **** #if (__FPU_PRESENT == 1)
1176:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
1177:CMSIS/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1178:CMSIS/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1179:CMSIS/core_cm4.h ****   @{
1180:CMSIS/core_cm4.h ****  */
1181:CMSIS/core_cm4.h **** 
1182:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1183:CMSIS/core_cm4.h ****  */
1184:CMSIS/core_cm4.h **** typedef struct
1185:CMSIS/core_cm4.h **** {
1186:CMSIS/core_cm4.h ****        uint32_t RESERVED0[1];
1187:CMSIS/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1188:CMSIS/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1189:CMSIS/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1190:CMSIS/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1191:CMSIS/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1192:CMSIS/core_cm4.h **** } FPU_Type;
1193:CMSIS/core_cm4.h **** 
1194:CMSIS/core_cm4.h **** /* Floating-Point Context Control Register */
1195:CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1196:CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1197:CMSIS/core_cm4.h **** 
1198:CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1199:CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1200:CMSIS/core_cm4.h **** 
1201:CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1202:CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1203:CMSIS/core_cm4.h **** 
1204:CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
1205:CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1206:CMSIS/core_cm4.h **** 
1207:CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1208:CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1209:CMSIS/core_cm4.h **** 
1210:CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1211:CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1212:CMSIS/core_cm4.h **** 
1213:CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1214:CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
ARM GAS  C:\Temp\cclpNmec.s 			page 24


1215:CMSIS/core_cm4.h **** 
1216:CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1217:CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1218:CMSIS/core_cm4.h **** 
1219:CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1220:CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
1221:CMSIS/core_cm4.h **** 
1222:CMSIS/core_cm4.h **** /* Floating-Point Context Address Register */
1223:CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1224:CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1225:CMSIS/core_cm4.h **** 
1226:CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register */
1227:CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1228:CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1229:CMSIS/core_cm4.h **** 
1230:CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1231:CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1232:CMSIS/core_cm4.h **** 
1233:CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1234:CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1235:CMSIS/core_cm4.h **** 
1236:CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1237:CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1238:CMSIS/core_cm4.h **** 
1239:CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 */
1240:CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1241:CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1242:CMSIS/core_cm4.h **** 
1243:CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1244:CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1245:CMSIS/core_cm4.h **** 
1246:CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1247:CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1248:CMSIS/core_cm4.h **** 
1249:CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1250:CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1251:CMSIS/core_cm4.h **** 
1252:CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1253:CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1254:CMSIS/core_cm4.h **** 
1255:CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1256:CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1257:CMSIS/core_cm4.h **** 
1258:CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1259:CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1260:CMSIS/core_cm4.h **** 
1261:CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
1262:CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
1263:CMSIS/core_cm4.h **** 
1264:CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 */
1265:CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1266:CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1267:CMSIS/core_cm4.h **** 
1268:CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1269:CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1270:CMSIS/core_cm4.h **** 
1271:CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
ARM GAS  C:\Temp\cclpNmec.s 			page 25


1272:CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1273:CMSIS/core_cm4.h **** 
1274:CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1275:CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
1276:CMSIS/core_cm4.h **** 
1277:CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1278:CMSIS/core_cm4.h **** #endif
1279:CMSIS/core_cm4.h **** 
1280:CMSIS/core_cm4.h **** 
1281:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_core_register
1282:CMSIS/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1283:CMSIS/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
1284:CMSIS/core_cm4.h ****   @{
1285:CMSIS/core_cm4.h ****  */
1286:CMSIS/core_cm4.h **** 
1287:CMSIS/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1288:CMSIS/core_cm4.h ****  */
1289:CMSIS/core_cm4.h **** typedef struct
1290:CMSIS/core_cm4.h **** {
1291:CMSIS/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1292:CMSIS/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1293:CMSIS/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1294:CMSIS/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1295:CMSIS/core_cm4.h **** } CoreDebug_Type;
1296:CMSIS/core_cm4.h **** 
1297:CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register */
1298:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1299:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1300:CMSIS/core_cm4.h **** 
1301:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1302:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1303:CMSIS/core_cm4.h **** 
1304:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1305:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1306:CMSIS/core_cm4.h **** 
1307:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1308:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1309:CMSIS/core_cm4.h **** 
1310:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1311:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1312:CMSIS/core_cm4.h **** 
1313:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1314:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1315:CMSIS/core_cm4.h **** 
1316:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1317:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1318:CMSIS/core_cm4.h **** 
1319:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1320:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1321:CMSIS/core_cm4.h **** 
1322:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1323:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1324:CMSIS/core_cm4.h **** 
1325:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1326:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1327:CMSIS/core_cm4.h **** 
1328:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
ARM GAS  C:\Temp\cclpNmec.s 			page 26


1329:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1330:CMSIS/core_cm4.h **** 
1331:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1332:CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1333:CMSIS/core_cm4.h **** 
1334:CMSIS/core_cm4.h **** /* Debug Core Register Selector Register */
1335:CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1336:CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1337:CMSIS/core_cm4.h **** 
1338:CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1339:CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1340:CMSIS/core_cm4.h **** 
1341:CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1342:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1343:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1344:CMSIS/core_cm4.h **** 
1345:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1346:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1347:CMSIS/core_cm4.h **** 
1348:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1349:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1350:CMSIS/core_cm4.h **** 
1351:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1352:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1353:CMSIS/core_cm4.h **** 
1354:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1355:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1356:CMSIS/core_cm4.h **** 
1357:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1358:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1359:CMSIS/core_cm4.h **** 
1360:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1361:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1362:CMSIS/core_cm4.h **** 
1363:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1364:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1365:CMSIS/core_cm4.h **** 
1366:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1367:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1368:CMSIS/core_cm4.h **** 
1369:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1370:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1371:CMSIS/core_cm4.h **** 
1372:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1373:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1374:CMSIS/core_cm4.h **** 
1375:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1376:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1377:CMSIS/core_cm4.h **** 
1378:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1379:CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1380:CMSIS/core_cm4.h **** 
1381:CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1382:CMSIS/core_cm4.h **** 
1383:CMSIS/core_cm4.h **** 
1384:CMSIS/core_cm4.h **** /** \ingroup    CMSIS_core_register
1385:CMSIS/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
ARM GAS  C:\Temp\cclpNmec.s 			page 27


1386:CMSIS/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1387:CMSIS/core_cm4.h ****   @{
1388:CMSIS/core_cm4.h ****  */
1389:CMSIS/core_cm4.h **** 
1390:CMSIS/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1391:CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1392:CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1393:CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1394:CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1395:CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1396:CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1397:CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1398:CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1399:CMSIS/core_cm4.h **** 
1400:CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1401:CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1402:CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1403:CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1404:CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1405:CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1406:CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1407:CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1408:CMSIS/core_cm4.h **** 
1409:CMSIS/core_cm4.h **** #if (__MPU_PRESENT == 1)
1410:CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1411:CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1412:CMSIS/core_cm4.h **** #endif
1413:CMSIS/core_cm4.h **** 
1414:CMSIS/core_cm4.h **** #if (__FPU_PRESENT == 1)
1415:CMSIS/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1416:CMSIS/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1417:CMSIS/core_cm4.h **** #endif
1418:CMSIS/core_cm4.h **** 
1419:CMSIS/core_cm4.h **** /*@} */
1420:CMSIS/core_cm4.h **** 
1421:CMSIS/core_cm4.h **** 
1422:CMSIS/core_cm4.h **** 
1423:CMSIS/core_cm4.h **** /*******************************************************************************
1424:CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1425:CMSIS/core_cm4.h ****   Core Function Interface contains:
1426:CMSIS/core_cm4.h ****   - Core NVIC Functions
1427:CMSIS/core_cm4.h ****   - Core SysTick Functions
1428:CMSIS/core_cm4.h ****   - Core Debug Functions
1429:CMSIS/core_cm4.h ****   - Core Register Access Functions
1430:CMSIS/core_cm4.h ****  ******************************************************************************/
1431:CMSIS/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1432:CMSIS/core_cm4.h **** */
1433:CMSIS/core_cm4.h **** 
1434:CMSIS/core_cm4.h **** 
1435:CMSIS/core_cm4.h **** 
1436:CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1437:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1438:CMSIS/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1439:CMSIS/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1440:CMSIS/core_cm4.h ****     @{
1441:CMSIS/core_cm4.h ****  */
1442:CMSIS/core_cm4.h **** 
ARM GAS  C:\Temp\cclpNmec.s 			page 28


1443:CMSIS/core_cm4.h **** /** \brief  Set Priority Grouping
1444:CMSIS/core_cm4.h **** 
1445:CMSIS/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1446:CMSIS/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1447:CMSIS/core_cm4.h ****   Only values from 0..7 are used.
1448:CMSIS/core_cm4.h ****   In case of a conflict between priority grouping and available
1449:CMSIS/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1450:CMSIS/core_cm4.h **** 
1451:CMSIS/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1452:CMSIS/core_cm4.h ****  */
1453:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1454:CMSIS/core_cm4.h **** {
1455:CMSIS/core_cm4.h ****   uint32_t reg_value;
1456:CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1457:CMSIS/core_cm4.h **** 
1458:CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1459:CMSIS/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1460:CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                 |
1461:CMSIS/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1462:CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1463:CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1464:CMSIS/core_cm4.h **** }
1465:CMSIS/core_cm4.h **** 
1466:CMSIS/core_cm4.h **** 
1467:CMSIS/core_cm4.h **** /** \brief  Get Priority Grouping
1468:CMSIS/core_cm4.h **** 
1469:CMSIS/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1470:CMSIS/core_cm4.h **** 
1471:CMSIS/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1472:CMSIS/core_cm4.h ****  */
1473:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1474:CMSIS/core_cm4.h **** {
1475:CMSIS/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1476:CMSIS/core_cm4.h **** }
1477:CMSIS/core_cm4.h **** 
1478:CMSIS/core_cm4.h **** 
1479:CMSIS/core_cm4.h **** /** \brief  Enable External Interrupt
1480:CMSIS/core_cm4.h **** 
1481:CMSIS/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1482:CMSIS/core_cm4.h **** 
1483:CMSIS/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1484:CMSIS/core_cm4.h ****  */
1485:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1486:CMSIS/core_cm4.h **** {
1487:CMSIS/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1488:CMSIS/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1489:CMSIS/core_cm4.h **** }
1490:CMSIS/core_cm4.h **** 
1491:CMSIS/core_cm4.h **** 
1492:CMSIS/core_cm4.h **** /** \brief  Disable External Interrupt
1493:CMSIS/core_cm4.h **** 
1494:CMSIS/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1495:CMSIS/core_cm4.h **** 
1496:CMSIS/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1497:CMSIS/core_cm4.h ****  */
1498:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1499:CMSIS/core_cm4.h **** {
ARM GAS  C:\Temp\cclpNmec.s 			page 29


1500:CMSIS/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1501:CMSIS/core_cm4.h **** }
1502:CMSIS/core_cm4.h **** 
1503:CMSIS/core_cm4.h **** 
1504:CMSIS/core_cm4.h **** /** \brief  Get Pending Interrupt
1505:CMSIS/core_cm4.h **** 
1506:CMSIS/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1507:CMSIS/core_cm4.h ****     for the specified interrupt.
1508:CMSIS/core_cm4.h **** 
1509:CMSIS/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1510:CMSIS/core_cm4.h **** 
1511:CMSIS/core_cm4.h ****     \return             0  Interrupt status is not pending.
1512:CMSIS/core_cm4.h ****     \return             1  Interrupt status is pending.
1513:CMSIS/core_cm4.h ****  */
1514:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1515:CMSIS/core_cm4.h **** {
1516:CMSIS/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1517:CMSIS/core_cm4.h **** }
1518:CMSIS/core_cm4.h **** 
1519:CMSIS/core_cm4.h **** 
1520:CMSIS/core_cm4.h **** /** \brief  Set Pending Interrupt
1521:CMSIS/core_cm4.h **** 
1522:CMSIS/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1523:CMSIS/core_cm4.h **** 
1524:CMSIS/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1525:CMSIS/core_cm4.h ****  */
1526:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1527:CMSIS/core_cm4.h **** {
1528:CMSIS/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1529:CMSIS/core_cm4.h **** }
1530:CMSIS/core_cm4.h **** 
1531:CMSIS/core_cm4.h **** 
1532:CMSIS/core_cm4.h **** /** \brief  Clear Pending Interrupt
1533:CMSIS/core_cm4.h **** 
1534:CMSIS/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1535:CMSIS/core_cm4.h **** 
1536:CMSIS/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1537:CMSIS/core_cm4.h ****  */
1538:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1539:CMSIS/core_cm4.h **** {
1540:CMSIS/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1541:CMSIS/core_cm4.h **** }
1542:CMSIS/core_cm4.h **** 
1543:CMSIS/core_cm4.h **** 
1544:CMSIS/core_cm4.h **** /** \brief  Get Active Interrupt
1545:CMSIS/core_cm4.h **** 
1546:CMSIS/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1547:CMSIS/core_cm4.h **** 
1548:CMSIS/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1549:CMSIS/core_cm4.h **** 
1550:CMSIS/core_cm4.h ****     \return             0  Interrupt status is not active.
1551:CMSIS/core_cm4.h ****     \return             1  Interrupt status is active.
1552:CMSIS/core_cm4.h ****  */
1553:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1554:CMSIS/core_cm4.h **** {
1555:CMSIS/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1556:CMSIS/core_cm4.h **** }
ARM GAS  C:\Temp\cclpNmec.s 			page 30


1557:CMSIS/core_cm4.h **** 
1558:CMSIS/core_cm4.h **** 
1559:CMSIS/core_cm4.h **** /** \brief  Set Interrupt Priority
1560:CMSIS/core_cm4.h **** 
1561:CMSIS/core_cm4.h ****     The function sets the priority of an interrupt.
1562:CMSIS/core_cm4.h **** 
1563:CMSIS/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1564:CMSIS/core_cm4.h **** 
1565:CMSIS/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1566:CMSIS/core_cm4.h ****     \param [in]  priority  Priority to set.
1567:CMSIS/core_cm4.h ****  */
1568:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1569:CMSIS/core_cm4.h **** {
1570:CMSIS/core_cm4.h ****   if(IRQn < 0) {
1571:CMSIS/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1572:CMSIS/core_cm4.h ****   else {
1573:CMSIS/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1574:CMSIS/core_cm4.h **** }
1575:CMSIS/core_cm4.h **** 
1576:CMSIS/core_cm4.h **** 
1577:CMSIS/core_cm4.h **** /** \brief  Get Interrupt Priority
1578:CMSIS/core_cm4.h **** 
1579:CMSIS/core_cm4.h ****     The function reads the priority of an interrupt. The interrupt
1580:CMSIS/core_cm4.h ****     number can be positive to specify an external (device specific)
1581:CMSIS/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1582:CMSIS/core_cm4.h **** 
1583:CMSIS/core_cm4.h **** 
1584:CMSIS/core_cm4.h ****     \param [in]   IRQn  Interrupt number.
1585:CMSIS/core_cm4.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1586:CMSIS/core_cm4.h ****                         priority bits of the microcontroller.
1587:CMSIS/core_cm4.h ****  */
1588:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1589:CMSIS/core_cm4.h **** {
1590:CMSIS/core_cm4.h **** 
1591:CMSIS/core_cm4.h ****   if(IRQn < 0) {
1592:CMSIS/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1593:CMSIS/core_cm4.h ****   else {
1594:CMSIS/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1595:CMSIS/core_cm4.h **** }
1596:CMSIS/core_cm4.h **** 
1597:CMSIS/core_cm4.h **** 
1598:CMSIS/core_cm4.h **** /** \brief  Encode Priority
1599:CMSIS/core_cm4.h **** 
1600:CMSIS/core_cm4.h ****     The function encodes the priority for an interrupt with the given priority group,
1601:CMSIS/core_cm4.h ****     preemptive priority value, and subpriority value.
1602:CMSIS/core_cm4.h ****     In case of a conflict between priority grouping and available
1603:CMSIS/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1604:CMSIS/core_cm4.h **** 
1605:CMSIS/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group.
1606:CMSIS/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1607:CMSIS/core_cm4.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1608:CMSIS/core_cm4.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1609:CMSIS/core_cm4.h ****  */
1610:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1611:CMSIS/core_cm4.h **** {
1612:CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1613:CMSIS/core_cm4.h ****   uint32_t PreemptPriorityBits;
ARM GAS  C:\Temp\cclpNmec.s 			page 31


1614:CMSIS/core_cm4.h ****   uint32_t SubPriorityBits;
1615:CMSIS/core_cm4.h **** 
1616:CMSIS/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1617:CMSIS/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1618:CMSIS/core_cm4.h **** 
1619:CMSIS/core_cm4.h ****   return (
1620:CMSIS/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1621:CMSIS/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1622:CMSIS/core_cm4.h ****          );
1623:CMSIS/core_cm4.h **** }
1624:CMSIS/core_cm4.h **** 
1625:CMSIS/core_cm4.h **** 
1626:CMSIS/core_cm4.h **** /** \brief  Decode Priority
1627:CMSIS/core_cm4.h **** 
1628:CMSIS/core_cm4.h ****     The function decodes an interrupt priority value with a given priority group to
1629:CMSIS/core_cm4.h ****     preemptive priority value and subpriority value.
1630:CMSIS/core_cm4.h ****     In case of a conflict between priority grouping and available
1631:CMSIS/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1632:CMSIS/core_cm4.h **** 
1633:CMSIS/core_cm4.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1634:CMSIS/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group.
1635:CMSIS/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1636:CMSIS/core_cm4.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1637:CMSIS/core_cm4.h ****  */
1638:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1639:CMSIS/core_cm4.h **** {
1640:CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1641:CMSIS/core_cm4.h ****   uint32_t PreemptPriorityBits;
1642:CMSIS/core_cm4.h ****   uint32_t SubPriorityBits;
1643:CMSIS/core_cm4.h **** 
1644:CMSIS/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1645:CMSIS/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1646:CMSIS/core_cm4.h **** 
1647:CMSIS/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1648:CMSIS/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1649:CMSIS/core_cm4.h **** }
1650:CMSIS/core_cm4.h **** 
1651:CMSIS/core_cm4.h **** 
1652:CMSIS/core_cm4.h **** /** \brief  System Reset
1653:CMSIS/core_cm4.h **** 
1654:CMSIS/core_cm4.h ****     The function initiates a system reset request to reset the MCU.
1655:CMSIS/core_cm4.h ****  */
1656:CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1657:CMSIS/core_cm4.h **** {
1658:CMSIS/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1659:CMSIS/core_cm4.h ****                                                                   buffered write are completed befo
1660:CMSIS/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1661:CMSIS/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1662:CMSIS/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1663:CMSIS/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1664:CMSIS/core_cm4.h ****   while(1);                                                    /* wait until reset */
1665:CMSIS/core_cm4.h **** }
1666:CMSIS/core_cm4.h **** 
1667:CMSIS/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1668:CMSIS/core_cm4.h **** 
1669:CMSIS/core_cm4.h **** 
1670:CMSIS/core_cm4.h **** 
ARM GAS  C:\Temp\cclpNmec.s 			page 32


1671:CMSIS/core_cm4.h **** /* ##################################    SysTick function  ########################################
1672:CMSIS/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1673:CMSIS/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1674:CMSIS/core_cm4.h ****     \brief      Functions that configure the System.
1675:CMSIS/core_cm4.h ****   @{
1676:CMSIS/core_cm4.h ****  */
1677:CMSIS/core_cm4.h **** 
1678:CMSIS/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1679:CMSIS/core_cm4.h **** 
1680:CMSIS/core_cm4.h **** /** \brief  System Tick Configuration
1681:CMSIS/core_cm4.h **** 
1682:CMSIS/core_cm4.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
1683:CMSIS/core_cm4.h ****     Counter is in free running mode to generate periodic interrupts.
1684:CMSIS/core_cm4.h **** 
1685:CMSIS/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts.
1686:CMSIS/core_cm4.h **** 
1687:CMSIS/core_cm4.h ****     \return          0  Function succeeded.
1688:CMSIS/core_cm4.h ****     \return          1  Function failed.
1689:CMSIS/core_cm4.h **** 
1690:CMSIS/core_cm4.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1691:CMSIS/core_cm4.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
1692:CMSIS/core_cm4.h ****     must contain a vendor-specific implementation of this function.
1693:CMSIS/core_cm4.h **** 
1694:CMSIS/core_cm4.h ****  */
1695:CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
  45              		.loc 2 1695 26 is_stmt 1 view .LVU3
  46              	.LBB11:
1696:CMSIS/core_cm4.h **** {
1697:CMSIS/core_cm4.h ****   if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
  47              		.loc 2 1697 3 view .LVU4
  48              		.loc 2 1697 14 is_stmt 0 view .LVU5
  49 000c 013B     		subs	r3, r3, #1
  50              	.LVL1:
  51              		.loc 2 1697 6 view .LVU6
  52 000e B3F1807F 		cmp	r3, #16777216
  53 0012 0DD2     		bcs	.L2
1698:CMSIS/core_cm4.h **** 
1699:CMSIS/core_cm4.h ****   SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  54              		.loc 2 1699 3 is_stmt 1 view .LVU7
  55              		.loc 2 1699 18 is_stmt 0 view .LVU8
  56 0014 4FF0E022 		mov	r2, #-536813568
  57 0018 5361     		str	r3, [r2, #20]
1700:CMSIS/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
  58              		.loc 2 1700 3 is_stmt 1 view .LVU9
  59              	.LVL2:
  60              	.LBB12:
  61              	.LBI12:
1568:CMSIS/core_cm4.h **** {
  62              		.loc 2 1568 22 view .LVU10
  63              	.LBB13:
1570:CMSIS/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  64              		.loc 2 1570 3 view .LVU11
1571:CMSIS/core_cm4.h ****   else {
  65              		.loc 2 1571 5 view .LVU12
1571:CMSIS/core_cm4.h ****   else {
  66              		.loc 2 1571 42 is_stmt 0 view .LVU13
  67 001a 084B     		ldr	r3, .L4+8
ARM GAS  C:\Temp\cclpNmec.s 			page 33


  68              	.LVL3:
1571:CMSIS/core_cm4.h ****   else {
  69              		.loc 2 1571 42 view .LVU14
  70 001c F021     		movs	r1, #240
  71 001e 83F82310 		strb	r1, [r3, #35]
  72              	.LVL4:
1571:CMSIS/core_cm4.h ****   else {
  73              		.loc 2 1571 42 view .LVU15
  74              	.LBE13:
  75              	.LBE12:
1701:CMSIS/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  76              		.loc 2 1701 3 is_stmt 1 view .LVU16
  77              		.loc 2 1701 18 is_stmt 0 view .LVU17
  78 0022 0021     		movs	r1, #0
  79 0024 9161     		str	r1, [r2, #24]
1702:CMSIS/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  80              		.loc 2 1702 3 is_stmt 1 view .LVU18
  81              		.loc 2 1702 18 is_stmt 0 view .LVU19
  82 0026 0720     		movs	r0, #7
  83 0028 1061     		str	r0, [r2, #16]
1703:CMSIS/core_cm4.h ****                    SysTick_CTRL_TICKINT_Msk   |
1704:CMSIS/core_cm4.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1705:CMSIS/core_cm4.h ****   return (0);                                                  /* Function successful */
  84              		.loc 2 1705 3 is_stmt 1 view .LVU20
  85              	.LVL5:
  86              		.loc 2 1705 3 is_stmt 0 view .LVU21
  87              	.LBE11:
  88              	.LBE10:
  55:./Core/Src/systick.c ****         /* capture error */
  56:./Core/Src/systick.c ****         while (1){
  57:./Core/Src/systick.c ****         }
  58:./Core/Src/systick.c ****     }
  59:./Core/Src/systick.c ****     /* configure the systick handler priority */
  60:./Core/Src/systick.c ****     NVIC_SetPriority(SysTick_IRQn, 0x00U);
  89              		.loc 1 60 5 is_stmt 1 view .LVU22
  90              	.LBB14:
  91              	.LBI14:
1568:CMSIS/core_cm4.h **** {
  92              		.loc 2 1568 22 view .LVU23
  93              	.LBB15:
1570:CMSIS/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  94              		.loc 2 1570 3 view .LVU24
1571:CMSIS/core_cm4.h ****   else {
  95              		.loc 2 1571 5 view .LVU25
1571:CMSIS/core_cm4.h ****   else {
  96              		.loc 2 1571 42 is_stmt 0 view .LVU26
  97 002a 83F82310 		strb	r1, [r3, #35]
  98              	.LVL6:
1571:CMSIS/core_cm4.h ****   else {
  99              		.loc 2 1571 42 view .LVU27
 100              	.LBE15:
 101              	.LBE14:
  61:./Core/Src/systick.c **** }
 102              		.loc 1 61 1 view .LVU28
 103 002e 7047     		bx	lr
 104              	.L2:
  56:./Core/Src/systick.c ****         }
ARM GAS  C:\Temp\cclpNmec.s 			page 34


 105              		.loc 1 56 9 is_stmt 1 discriminator 1 view .LVU29
  57:./Core/Src/systick.c ****     }
 106              		.loc 1 57 9 discriminator 1 view .LVU30
  56:./Core/Src/systick.c ****         }
 107              		.loc 1 56 15 discriminator 1 view .LVU31
 108 0030 FEE7     		b	.L2
 109              	.L5:
 110 0032 00BF     		.align	2
 111              	.L4:
 112 0034 00000000 		.word	SystemCoreClock
 113 0038 D34D6210 		.word	274877907
 114 003c 00ED00E0 		.word	-536810240
 115              		.cfi_endproc
 116              	.LFE116:
 118              		.section	.text.delay_1ms,"ax",%progbits
 119              		.align	1
 120              		.global	delay_1ms
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 125              	delay_1ms:
 126              	.LVL7:
 127              	.LFB117:
  62:./Core/Src/systick.c **** 
  63:./Core/Src/systick.c **** /*!
  64:./Core/Src/systick.c ****     \brief      delay a time in milliseconds
  65:./Core/Src/systick.c ****     \param[in]  count: count in milliseconds
  66:./Core/Src/systick.c ****     \param[out] none
  67:./Core/Src/systick.c ****     \retval     none
  68:./Core/Src/systick.c **** */
  69:./Core/Src/systick.c **** void delay_1ms(uint32_t count)
  70:./Core/Src/systick.c **** {
 128              		.loc 1 70 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
  71:./Core/Src/systick.c ****     delay = count;
 133              		.loc 1 71 5 view .LVU33
 134              		.loc 1 71 11 is_stmt 0 view .LVU34
 135 0000 034B     		ldr	r3, .L8
 136 0002 1860     		str	r0, [r3]
  72:./Core/Src/systick.c **** 
  73:./Core/Src/systick.c ****     while(0U != delay){
 137              		.loc 1 73 5 is_stmt 1 view .LVU35
 138              	.L7:
  74:./Core/Src/systick.c ****     }
 139              		.loc 1 74 5 discriminator 1 view .LVU36
  73:./Core/Src/systick.c ****     }
 140              		.loc 1 73 14 discriminator 1 view .LVU37
 141 0004 024B     		ldr	r3, .L8
 142 0006 1B68     		ldr	r3, [r3]
 143 0008 002B     		cmp	r3, #0
 144 000a FBD1     		bne	.L7
  75:./Core/Src/systick.c **** }
 145              		.loc 1 75 1 is_stmt 0 view .LVU38
 146 000c 7047     		bx	lr
ARM GAS  C:\Temp\cclpNmec.s 			page 35


 147              	.L9:
 148 000e 00BF     		.align	2
 149              	.L8:
 150 0010 00000000 		.word	delay
 151              		.cfi_endproc
 152              	.LFE117:
 154              		.section	.text.delay_decrement,"ax",%progbits
 155              		.align	1
 156              		.global	delay_decrement
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	delay_decrement:
 162              	.LFB118:
  76:./Core/Src/systick.c **** 
  77:./Core/Src/systick.c **** /*!
  78:./Core/Src/systick.c ****     \brief      delay decrement
  79:./Core/Src/systick.c ****     \param[in]  none
  80:./Core/Src/systick.c ****     \param[out] none
  81:./Core/Src/systick.c ****     \retval     none
  82:./Core/Src/systick.c **** */
  83:./Core/Src/systick.c **** void delay_decrement(void)
  84:./Core/Src/systick.c **** {
 163              		.loc 1 84 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
  85:./Core/Src/systick.c ****     if (0U != delay){
 168              		.loc 1 85 5 view .LVU40
 169              		.loc 1 85 12 is_stmt 0 view .LVU41
 170 0000 034B     		ldr	r3, .L12
 171 0002 1B68     		ldr	r3, [r3]
 172              		.loc 1 85 8 view .LVU42
 173 0004 1BB1     		cbz	r3, .L10
  86:./Core/Src/systick.c ****         delay--;
 174              		.loc 1 86 9 is_stmt 1 view .LVU43
 175              		.loc 1 86 14 is_stmt 0 view .LVU44
 176 0006 024A     		ldr	r2, .L12
 177 0008 1368     		ldr	r3, [r2]
 178 000a 013B     		subs	r3, r3, #1
 179 000c 1360     		str	r3, [r2]
 180              	.L10:
  87:./Core/Src/systick.c ****     }
  88:./Core/Src/systick.c **** }
 181              		.loc 1 88 1 view .LVU45
 182 000e 7047     		bx	lr
 183              	.L13:
 184              		.align	2
 185              	.L12:
 186 0010 00000000 		.word	delay
 187              		.cfi_endproc
 188              	.LFE118:
 190              		.section	.bss.delay,"aw",%nobits
 191              		.align	2
 194              	delay:
 195 0000 00000000 		.space	4
ARM GAS  C:\Temp\cclpNmec.s 			page 36


 196              		.text
 197              	.Letext0:
 198              		.file 3 "CMSIS/GD/GD32F30x/Include/gd32f30x.h"
 199              		.file 4 "c:\\ST\\STM32CubeIDE_1.15.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 200              		.file 5 "c:\\ST\\STM32CubeIDE_1.15.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 201              		.file 6 "GD32F30x_standard_peripheral/Include/gd32f30x_dbg.h"
 202              		.file 7 "CMSIS/GD/GD32F30x/Include/system_gd32f30x.h"
ARM GAS  C:\Temp\cclpNmec.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 systick.c
  C:\Temp\cclpNmec.s:21     .text.systick_config:00000000 $t
  C:\Temp\cclpNmec.s:27     .text.systick_config:00000000 systick_config
  C:\Temp\cclpNmec.s:112    .text.systick_config:00000034 $d
  C:\Temp\cclpNmec.s:119    .text.delay_1ms:00000000 $t
  C:\Temp\cclpNmec.s:125    .text.delay_1ms:00000000 delay_1ms
  C:\Temp\cclpNmec.s:150    .text.delay_1ms:00000010 $d
  C:\Temp\cclpNmec.s:194    .bss.delay:00000000 delay
  C:\Temp\cclpNmec.s:155    .text.delay_decrement:00000000 $t
  C:\Temp\cclpNmec.s:161    .text.delay_decrement:00000000 delay_decrement
  C:\Temp\cclpNmec.s:186    .text.delay_decrement:00000010 $d
  C:\Temp\cclpNmec.s:191    .bss.delay:00000000 $d

UNDEFINED SYMBOLS
SystemCoreClock
